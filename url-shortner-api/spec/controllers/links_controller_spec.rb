
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Api::V1::LinksController, type: :request do

  describe "GET /api/v1/links" do
    it "returns all links" do
      get api_v1_links_path
      expect(response).to be_successful
    end
  end

  describe "POST /api/v1/links" do
    before do 
      @link = FactoryBot.create(:link)
    end
    context "with valid params" do
      it "creates a new link" do
        link_params = FactoryBot.attributes_for(:link)
        expect {
          post api_v1_links_path, params: {link: link_params}
        }.to change(Link, :count).by(1)
      end
      it "renders a JSON response with the new link" do
        link_params = FactoryBot.attributes_for(:link)
        post api_v1_links_path, params: {link: link_params}
        expect(response).to have_http_status(:success)
        expect(response.content_type).to eq('application/json')
      end
    end

    context "with invalid params" do
      it "renders a JSON response with errors for the new link" do
        link_params = FactoryBot.attributes_for(:link, :invalid)
        post api_v1_links_path, params: {link: link_params}
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end
end
